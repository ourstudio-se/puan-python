import puan.ndarray as pnd
import maz # https://github.com/ourstudio-se/maz-python
import npycvx # https://github.com/ourstudio-se/puan-npycvx
import operator
import functools
import typing
import numpy

def solve_stuff(A, b, int_idxs, objs) -> typing.Iterable[numpy.ndarray]:

    """
        First, prepare, load and convert the polytope into a cvx-object and then start
        to solve all objectives. npycvx.solve_lp returns a tuple of (status, solution) which we
        from it gets the second item.
    """

    return map(
        maz.compose( # <- maz is a functional programming package (https://github.com/ourstudio-se/maz-python)
            operator.itemgetter(1), # <- get the second item from solution tuple
            functools.partial(
                npycvx.solve_lp, # <- solve linear programming problem
                *npycvx.convert_numpy(A, b, set(int_idxs)), # <- prepare problems and set which indices are ints
                False # <- minimize = False, i.e. we set problem to be maximized
            )
        ),
        objs
    )

token = "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"
M = pnd.ge_polyhedron_config.from_b64(token)
sol = {k.id: 1 for k in next(M.select({"wholesale:salesModel": 1}, solver=solve_stuff))}
vec = M.A.construct(*sol.items())
1